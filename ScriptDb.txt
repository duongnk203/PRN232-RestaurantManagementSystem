

-- Bảng Danh mục món ăn
CREATE TABLE Categories (
    CategoryID INT PRIMARY KEY IDENTITY(1,1),
    CategoryName NVARCHAR(100) NOT NULL,
    Description NVARCHAR(255)
);

-- Bảng Món ăn
CREATE TABLE MenuItems (
    ItemID INT PRIMARY KEY IDENTITY(1,1),
    ItemName NVARCHAR(100) NOT NULL,
    Price DECIMAL(10,2) NOT NULL,
    Description NVARCHAR(255),
    IsAvailable BIT DEFAULT 1
);

-- Bảng quan hệ nhiều-nhiều giữa Món ăn và Danh mục
CREATE TABLE MenuItemCategories (
    ItemID INT NOT NULL,
    CategoryID INT NOT NULL,
    PRIMARY KEY (ItemID, CategoryID),
    FOREIGN KEY (ItemID) REFERENCES MenuItems(ItemID),
    FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID)
);

-- Bảng Bàn
CREATE TABLE Tables (
    TableID INT PRIMARY KEY IDENTITY(1,1),
    TableNumber NVARCHAR(10) NOT NULL,
    Capacity INT NOT NULL,
    Status NVARCHAR(50) DEFAULT 'Available' -- Available, Occupied, Reserved
);

-- Bảng Khách hàng (dùng cho đơn mang về)
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY IDENTITY(1,1),
    FirstName NVARCHAR(50),
    LastName NVARCHAR(50),
    Phone NVARCHAR(20),
    Address NVARCHAR(255)
);

-- Bảng Nhân viên
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY IDENTITY(1,1),
    FirstName NVARCHAR(50) NOT NULL,
    LastName NVARCHAR(50) NOT NULL,
    Position NVARCHAR(50) NOT NULL, -- Waiter, Chef, Manager, etc.
    Phone NVARCHAR(20),
    HireDate DATE NOT NULL
);

-- Bảng Ca làm việc
CREATE TABLE Shifts (
    ShiftID INT PRIMARY KEY IDENTITY(1,1),
    ShiftName NVARCHAR(50) NOT NULL, -- Morning, Evening, Night, etc.
    StartTime TIME NOT NULL,
    EndTime TIME NOT NULL
);

-- Bảng quan hệ Nhân viên và Ca làm việc
CREATE TABLE EmployeeShifts (
    EmployeeShiftID INT PRIMARY KEY IDENTITY(1,1),
    EmployeeID INT NOT NULL,
    ShiftID INT NOT NULL,
    ShiftDate DATE NOT NULL,
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
    FOREIGN KEY (ShiftID) REFERENCES Shifts(ShiftID)
);

-- Bảng Đơn hàng
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY IDENTITY(1,1),
    TableID INT NULL, -- NULL cho đơn mang về
    CustomerID INT NULL, -- NULL cho đơn ăn tại chỗ
    EmployeeID INT NOT NULL,
    OrderDate DATETIME NOT NULL DEFAULT GETDATE(), -- Thời gian tạo đơn
    TotalAmount DECIMAL(10,2) NOT NULL DEFAULT 0,
    OrderType NVARCHAR(50) NOT NULL, -- DineIn, TakeAway
    PaymentMethod NVARCHAR(50) NOT NULL, -- Cash, Online
    PaymentStatus NVARCHAR(50) NOT NULL DEFAULT 'Pending', -- Pending, Completed, Failed
    Status NVARCHAR(50) NOT NULL DEFAULT 'Pending', -- Pending, Completed, Cancelled
    FOREIGN KEY (TableID) REFERENCES Tables(TableID),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID),
    CONSTRAINT CHK_OrderType CHECK (OrderType IN ('DineIn', 'TakeAway')),
    CONSTRAINT CHK_PaymentMethod CHECK (PaymentMethod IN ('Cash', 'Online'))
);

-- Bảng Chi tiết đơn hàng
CREATE TABLE OrderDetails (
    OrderDetailID INT PRIMARY KEY IDENTITY(1,1),
    OrderID INT NOT NULL,
    ItemID INT NOT NULL,
    Quantity INT NOT NULL,
    UnitPrice DECIMAL(10,2) NOT NULL,
    Subtotal DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (ItemID) REFERENCES MenuItems(ItemID)
);

-- View để nhân viên xem ca làm của mình
CREATE VIEW EmployeeShiftView AS
SELECT 
    e.EmployeeID,
    e.FirstName,
    e.LastName,
    s.ShiftName,
    s.StartTime,
    s.EndTime,
    es.ShiftDate
FROM Employees e
JOIN EmployeeShifts es ON e.EmployeeID = es.EmployeeID
JOIN Shifts s ON es.ShiftID = s.ShiftID;

-- Trigger để cập nhật TotalAmount trong bảng Orders khi thêm/sửa/xóa OrderDetails
CREATE TRIGGER UpdateOrderTotal
ON OrderDetails
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
    UPDATE Orders
    SET TotalAmount = (
        SELECT SUM(Subtotal)
        FROM OrderDetails
        WHERE OrderID = Orders.OrderID
    )
    WHERE OrderID IN (
        SELECT OrderID FROM inserted
        UNION
        SELECT OrderID FROM deleted
    );
END;
GO

-- Stored Procedure: Đánh giá hiệu quả làm việc của nhân viên
CREATE PROCEDURE EvaluateEmployeePerformance
    @StartDate DATE,
    @EndDate DATE
AS
BEGIN
    SELECT 
        e.EmployeeID,
        e.FirstName,
        e.LastName,
        e.Position,
        COUNT(o.OrderID) AS TotalOrders,
        SUM(o.TotalAmount) AS TotalRevenue,
        AVG(CAST(DATEDIFF(MINUTE, o.OrderDate, 
            (SELECT MIN(o2.OrderDate) 
             FROM Orders o2 
             WHERE o2.OrderID > o.OrderID AND o2.Status = 'Completed')) AS FLOAT)) AS AvgProcessingTimeMinutes
    FROM Employees e
    LEFT JOIN Orders o ON e.EmployeeID = o.EmployeeID
    WHERE o.OrderDate BETWEEN @StartDate AND @EndDate
        AND o.Status = 'Completed'
    GROUP BY e.EmployeeID, e.FirstName, e.LastName, e.Position
    ORDER BY TotalRevenue DESC;
END;
GO

-- Stored Procedure: Xác định khung giờ khách gọi món nhiều nhất
CREATE PROCEDURE PeakOrderHours
    @StartDate DATE,
    @EndDate DATE
AS
BEGIN
    SELECT 
        DATEPART(HOUR, OrderDate) AS OrderHour,
        COUNT(OrderID) AS TotalOrders,
        SUM(TotalAmount) AS TotalRevenue
    FROM Orders
    WHERE OrderDate BETWEEN @StartDate AND @EndDate
        AND Status = 'Completed'
    GROUP BY DATEPART(HOUR, OrderDate)
    ORDER BY TotalOrders DESC;
END;
GO

-- Stored Procedure: Thống kê các món được gọi nhiều nhất
CREATE PROCEDURE TopMenuItems
    @StartDate DATE,
    @EndDate DATE,
    @TopN INT = 10
AS
BEGIN
    SELECT TOP (@TopN)
        m.ItemID,
        m.ItemName,
        SUM(od.Quantity) AS TotalQuantity,
        SUM(od.Subtotal) AS TotalRevenue
    FROM MenuItems m
    JOIN OrderDetails od ON m.ItemID = od.ItemID
    JOIN Orders o ON od.OrderID = o.OrderID
    WHERE o.OrderDate BETWEEN @StartDate AND @EndDate
        AND o.Status = 'Completed'
    GROUP BY m.ItemID, m.ItemName
    ORDER BY TotalQuantity DESC;
END;
GO

-- Stored Procedure: Tổng hợp doanh thu theo ngày/tuần/tháng/năm
CREATE PROCEDURE RevenueSummary
    @Period NVARCHAR(10), -- 'Day', 'Week', 'Month', 'Year'
    @StartDate DATE,
    @EndDate DATE
AS
BEGIN
    IF @Period = 'Day'
        SELECT 
            CAST(OrderDate AS DATE) AS Period,
            COUNT(OrderID) AS TotalOrders,
            SUM(TotalAmount) AS TotalRevenue
        FROM Orders
        WHERE OrderDate BETWEEN @StartDate AND @EndDate
            AND Status = 'Completed'
        GROUP BY CAST(OrderDate AS DATE)
        ORDER BY Period;

    ELSE IF @Period = 'Week'
        SELECT 
            DATEPART(WEEK, OrderDate) AS WeekNumber,
            YEAR(OrderDate) AS Year,
            COUNT(OrderID) AS TotalOrders,
            SUM(TotalAmount) AS TotalRevenue
        FROM Orders
        WHERE OrderDate BETWEEN @StartDate AND @EndDate
            AND Status = 'Completed'
        GROUP BY DATEPART(WEEK, OrderDate), YEAR(OrderDate)
        ORDER BY Year, WeekNumber;

    ELSE IF @Period = 'Month'
        SELECT 
            MONTH(OrderDate) AS Month,
            YEAR(OrderDate) AS Year,
            COUNT(OrderID) AS TotalOrders,
            SUM(TotalAmount) AS TotalRevenue
        FROM Orders
        WHERE OrderDate BETWEEN @StartDate AND @EndDate
            AND Status = 'Completed'
        GROUP BY MONTH(OrderDate), YEAR(OrderDate)
        ORDER BY Year, Month;

    ELSE IF @Period = 'Year'
        SELECT 
            YEAR(OrderDate) AS Year,
            COUNT(OrderID) AS TotalOrders,
            SUM(TotalAmount) AS TotalRevenue
        FROM Orders
        WHERE OrderDate BETWEEN @StartDate AND @EndDate
            AND Status = 'Completed'
        GROUP BY YEAR(OrderDate)
        ORDER BY Year;
END;
GO

-- Thêm dữ liệu mẫu
INSERT INTO Categories (CategoryName, Description) VALUES
(N'Đồ uống', N'Các loại nước uống'),
(N'Món chính', N'Các món ăn chính'),
(N'Tráng miệng', N'Các món tráng miệng');

INSERT INTO MenuItems (ItemName, Price, Description, IsAvailable) VALUES
(N'Cà phê đen', 30000, N'Cà phê đen nguyên chất', 1),
(N'Trà sữa', 40000, N'Trà sữa trân châu', 1),
(N'Phở bò', 80000, N'Phở bò truyền thống', 1),
(N'Bánh flan', 25000, N'Bánh flan caramel', 1);

INSERT INTO MenuItemCategories (ItemID, CategoryID) VALUES
(1, 1), -- Cà phê đen thuộc Đồ uống
(2, 1), -- Trà sữa thuộc Đồ uống
(3, 2), -- Phở bò thuộc Món chính
(4, 3), -- Bánh flan thuộc Tráng miệng
(4, 1); -- Bánh flan cũng thuộc Đồ uống

INSERT INTO Tables (TableNumber, Capacity, Status) VALUES
('T01', 4, 'Available'),
('T02', 6, 'Available'),
('T03', 2, 'Available');

INSERT INTO Customers (FirstName, LastName, Phone, Address) VALUES
(N'Lê', N'Văn C', '0923456789', N'123 Đường Láng, Hà Nội'),
(N'Phạm', N'Thị D', '0934567890', N'456 Nguyễn Trãi, TP.HCM');

INSERT INTO Employees (FirstName, LastName, Position, Phone, HireDate) VALUES
(N'Nguyễn', N'Văn A', N'Waiter', '0901234567', '2024-01-01'),
(N'Trần', N'Thị B', N'Manager', '0912345678', '2023-06-01');

INSERT INTO Shifts (ShiftName, StartTime, EndTime) VALUES
(N'Morning', '07:00:00', '15:00:00'),
(N'Evening', '15:00:00', '23:00:00');

INSERT INTO EmployeeShifts (EmployeeID, ShiftID, ShiftDate) VALUES
(1, 1, '2025-06-17'), -- Nguyễn Văn A ca sáng ngày 17/06/2025
(2, 2, '2025-06-17'); -- Trần Thị B ca tối ngày 17/06/2025

-- Dữ liệu mẫu cho đơn hàng
INSERT INTO Orders (TableID, CustomerID, EmployeeID, OrderDate, OrderType, PaymentMethod, PaymentStatus, Status) VALUES
(1, NULL, 1, '2025-06-16 12:00:00', 'DineIn', 'Cash', 'Completed', 'Completed'), -- Đơn ăn tại chỗ
(NULL, 1, 2, '2025-06-16 13:00:00', 'TakeAway', 'Online', 'Completed', 'Completed'), -- Đơn mang về
(2, NULL, 1, '2025-06-16 18:30:00', 'DineIn', 'Online', 'Completed', 'Completed'), -- Đơn ăn tại chỗ tối
(NULL, 2, 2, '2025-06-15 11:45:00', 'TakeAway', 'Cash', 'Completed', 'Completed'); -- Đơn mang về ngày trước

INSERT INTO OrderDetails (OrderID, ItemID, Quantity, UnitPrice, Subtotal) VALUES
(1, 3, 2, 80000, 160000), -- Đơn 1: 2 Phở bò
(2, 2, 1, 40000, 40000), -- Đơn 2: 1 Trà sữa
(2, 4, 1, 25000, 25000), -- Đơn 2: 1 Bánh flan
(3, 1, 3, 30000, 90000), -- Đơn 3: 3 Cà phê đen
(4, 3, 1, 80000, 80000), -- Đơn 4: 1 Phở bò
(4, 2, 2, 40000, 80000); -- Đơn 4: 2 Trà sữa